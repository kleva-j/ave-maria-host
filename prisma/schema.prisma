// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PosterSource {
  RAW
  GITHUB
}

enum Roles {
  admin
  agent
  user
  guest
}

enum Status {
  approved
  pending
  denied
}

enum UserStatus {
  active
  pending
  invited
  revoked
  deleted
  deactivated
}

enum RequestStatus {
  approved
  pending
  denied
  completed
}

enum CardStatus {
  active
  closed
  deleted
  finished
}

enum RequestType {
  newCard
  withdrawal
  contributions
}

model Post {
  id     String       @id @default(uuid())
  name   String
  text   String
  source PosterSource @default(RAW)

  // To return `Date`s intact through the API we need to add data transformers
  // https://trpc.io/docs/data-transformers
  createdAt DateTime @unique @default(now())
  updatedAt DateTime @unique @default(now())
}

model Message {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  text      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @unique @default(now())
  updatedAt DateTime @unique @default(now())
}

model Card {
  id                  String         @id @default(uuid())
  userId              String         @map("user_id")
  name                String
  status              CardStatus     @default(active)
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  contributions       Contribution[]
  withdrawal_requests Request[]
  createdAt           DateTime       @unique @default(now())
  updatedAt           DateTime       @unique @default(now())
}

model Contribution {
  id         String   @id @default(uuid())
  cardId     String
  agentId    String
  text       String
  amount     Int
  approvedAt DateTime
  Card       Card     @relation(fields: [cardId], references: [id])
  receivedBy User     @relation(fields: [agentId], references: [id], onDelete: Cascade)
  createdAt  DateTime @unique @default(now())
  updatedAt  DateTime @unique @default(now())
}

model Request {
  id         String        @id @default(uuid())
  userId     String        @map("user_id")
  type       RequestType   @default(contributions)
  cardId     String?
  info       String?
  amount     Int
  Card       Card?         @relation(fields: [cardId], references: [id])
  status     RequestStatus @default(pending)
  approvedAt DateTime
  approvedBy String
  createdAt  DateTime      @unique @default(now())
  updatedAt  DateTime      @unique @default(now())
  date       DateTime      @default(now())
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  @@unique([provider, providerAccountId])
  @@index([providerAccountId], name: "providerAccountId")
  @@index([provider], name: "provider")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  expires      DateTime
  sessionToken String?  @unique @map(name: "session_token")
  accessToken  String?  @unique @map(name: "access_token")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id                    String         @id @default(cuid())
  name                  String?
  email                 String?        @unique
  emailVerified         DateTime?      @map(name: "email_verified")
  image                 String?
  accounts              Account[]
  sessions              Session[]
  cards                 Card[]
  message               Message[]
  role                  Roles          @default(user)
  createdAt             DateTime       @default(now()) @map(name: "created_at")
  updatedAt             DateTime?      @updatedAt @map(name: "updated_at")
  contributionsApproved Contribution[]

  @@map(name: "users")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@unique([identifier, token])
  @@map(name: "verification_requests")
}
